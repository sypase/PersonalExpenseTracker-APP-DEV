@page "/signup"
@using MudBlazor
@using MauiApp2.Data.Service
@using MauiApp2.Data.Models
@using Microsoft.AspNetCore.Components.Forms
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Text.Json

<MudPaper Class="d-flex justify-center align-center" Style="min-height: 100vh; background-color: #f4f6f8;">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
                    Create Your Account
                </MudText>
                <EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <!-- Username -->
                    <MudTextField @bind-Value="newUser.Username" Label="Username" Required="true" Variant="Variant.Filled" FullWidth="true" />
                    <!-- Password -->
                    <MudTextField @bind-Value="newUser.Password" Label="Password" InputType="InputType.Password" Required="true" Variant="Variant.Filled" FullWidth="true" />
                    <!-- Currency Selection (Dropdown) -->
                    <MudSelect T="string" @bind-Value="newUser.Currency" Label="Currency" Required="true" Variant="Variant.Filled" FullWidth="true">
                        <MudSelectItem Value="@("USD")">USD</MudSelectItem>
                        <MudSelectItem Value="@("NPR")">NPR</MudSelectItem>
                    </MudSelect>
                    <!-- Sign Up Button -->
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-4">
                        Sign Up
                    </MudButton>
                    <!-- Error Message -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-3">
                            @errorMessage
                        </MudAlert>
                    }
                    <!-- Success Message -->
                    @if (isRegistrationSuccessful)
                    {
                        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mt-3">
                            Registration Successful! Redirecting to login page...
                        </MudAlert>
                    }
                </EditForm>
            </MudCardContent>
        </MudCard>
        <!-- Already Have Account -->
        <MudText Align="Align.Center" Class="mt-3">
            Already have an account? <MudLink Href="/login" Color="Color.Primary">Login here</MudLink>
        </MudText>
    </MudContainer>
</MudPaper>

@code {
    private User newUser = new User(string.Empty, string.Empty, string.Empty);
    private string errorMessage;
    private bool isRegistrationSuccessful = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            // Check if the username already exists
            var existingUser = await UserService.GetUserAsync(newUser.Username);
            if (existingUser != null)
            {
                errorMessage = "Username already exists!";
                return;
            }
            // Register the new user
            await UserService.RegisterUser(newUser);
            // Set the success flag
            isRegistrationSuccessful = true;
            // Redirect to the login page after a brief delay
            await Task.Delay(2000); // Delay for 2 seconds to show the success message
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}