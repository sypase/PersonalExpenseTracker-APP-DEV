@page "/dashboard"
@using MauiApp2.Data.Service
@using MauiApp2.Data.Models
@using MudBlazor
@using System.Linq
@using System.Threading.Tasks

@inject DashboardService DashboardService
@inject IJSRuntime JSRuntime

<MudContainer>
    <MudGrid>
        <!-- Transaction Summary -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Transaction Summary</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Total Inflows:</MudText>
                            <MudText Typo="Typo.h6">@totalInflows.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Total Outflows:</MudText>
                            <MudText Typo="Typo.h6">@totalOutflows.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Total Debt:</MudText>
                            <MudText Typo="Typo.h6">@totalDebt.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Remaining Debt:</MudText>
                            <MudText Typo="Typo.h6">@remainingDebt.ToString("C")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Donut Chart: Credit vs Debit -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@donutChartData" InputLabels="@donutChartLabels"></MudChart>
            </MudPaper>
            <MudText Typo="Typo.h6" Class="mt-2">Credit vs Debit</MudText>
        </MudItem>

        <!-- Line Chart: Transactions Over Time -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Transactions Over Time</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart Type="ChartType.Line" Data="@lineChartData" Options="@lineChartOptions" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Highest and Lowest Transactions -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Highest and Lowest Transactions</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Highest Inflow:</MudText>
                            <MudText Typo="Typo.h6">@highestInflow?.Title - @highestInflow?.Amount.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Lowest Inflow:</MudText>
                            <MudText Typo="Typo.h6">@lowestInflow?.Title - @lowestInflow?.Amount.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Highest Outflow:</MudText>
                            <MudText Typo="Typo.h6">@highestOutflow?.Title - @highestOutflow?.Amount.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Lowest Outflow:</MudText>
                            <MudText Typo="Typo.h6">@lowestOutflow?.Title - @lowestOutflow?.Amount.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Highest Debt:</MudText>
                            <MudText Typo="Typo.h6">@highestDebt?.Creditor - @highestDebt?.AmountOwed.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Lowest Debt:</MudText>
                            <MudText Typo="Typo.h6">@lowestDebt?.Creditor - @lowestDebt?.AmountOwed.ToString("C")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Pending Debts -->
    <MudCard Class="mt-4">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Pending Debts</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (pendingDebts.Any())
            {
                <MudTable Items="pendingDebts" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Creditor</MudTh>
                        <MudTh>Amount Owed</MudTh>
                        <MudTh>Due Date</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Creditor">@context.Creditor</MudTd>
                        <MudTd DataLabel="Amount Owed">@context.AmountOwed.ToString("C")</MudTd>
                        <MudTd DataLabel="Due Date">@context.DueDate.ToShortDateString()</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudText Typo="Typo.body1">No pending debts.</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private decimal totalInflows;
    private decimal totalOutflows;
    private decimal totalDebt;
    private decimal remainingDebt;

    private List<Debt> pendingDebts = new List<Debt>();
    private object lineChartData;
    private object lineChartOptions;
    private string userName;

    // Donut Chart Data
    private double[] donutChartData;
    private string[] donutChartLabels = { "Credit", "Debit" };

    // Highest and Lowest Transactions
    private Transaction highestInflow;
    private Transaction lowestInflow;
    private Transaction highestOutflow;
    private Transaction lowestOutflow;
    private Debt highestDebt;
    private Debt lowestDebt;

    protected override async Task OnInitializedAsync()
    {
        // Get the username from local storage
        userName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser") ?? "Guest";

        // Fetch transaction summary
        var transactionSummary = await DashboardService.GetTransactionSummaryAsync(userName);
        totalInflows = transactionSummary.totalInflows;
        totalOutflows = transactionSummary.totalOutflows;
        totalDebt = transactionSummary.totalDebt;
        remainingDebt = transactionSummary.remainingDebt;

        // Get pending debts
        pendingDebts = await DashboardService.GetPendingDebtsAsync(userName);

        // Prepare Donut Chart Data
        var categorySummary = await DashboardService.GetCategoryWiseTransactionSummaryAsync(userName);
        donutChartData = new double[] { (double)categorySummary["Credit"], (double)categorySummary["Debit"] };

        // Prepare Line Chart Data
        var lineChartTransactions = await DashboardService.GetTransactionsForLineChartAsync(userName, DateTime.Now.AddMonths(-6), DateTime.Now);
        lineChartData = new
        {
            labels = lineChartTransactions.Keys.Select(d => d.ToShortDateString()).ToArray(),
            datasets = new[]
            {
                new {
                    label = "Transactions",
                    data = lineChartTransactions.Values.Select(v => (double)v).ToArray(),
                    fill = false,
                    borderColor = "#36A2EB",
                    tension = 0.1
                }
            }
        };

        lineChartOptions = new
        {
            responsive = true,
            plugins = new { legend = new { position = "top" } },
            scales = new
            {
                y = new { min = 0, beginAtZero = true }
            }
        };

        // Fetch highest and lowest transactions
        var highestLowestTransactions = await DashboardService.GetHighestAndLowestTransactionsAsync(userName);
        highestInflow = highestLowestTransactions.highestInflow;
        lowestInflow = highestLowestTransactions.lowestInflow;
        highestOutflow = highestLowestTransactions.highestOutflow;
        lowestOutflow = highestLowestTransactions.lowestOutflow;
        highestDebt = highestLowestTransactions.highestDebt;
        lowestDebt = highestLowestTransactions.lowestDebt;
    }
}