@page "/dashboard"
@using MauiApp2.Data.Service
@using MauiApp2.Data.Models
@using MudBlazor
@using System.Linq
@using System.Threading.Tasks
@using System.Globalization

@inject DashboardService DashboardService
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <!-- Date Range Picker -->
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Filter by Date Range</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudDateRangePicker @bind-DateRange="_dateRange" Label="Select Date Range" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateDashboardData" Class="mt-2">
                        Apply Filter
                    </MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Transaction Summary -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Transaction Summary</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body1">Good @greeting, @userName!</MudText>
                            <MudText Typo="Typo.body2">@currentDateTime.ToString("dddd, MMMM dd, yyyy h:mm tt")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Total Inflows:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Success">@FormatCurrency(totalInflows) <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" /></MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Total Outflows:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Error">@FormatCurrency(totalOutflows) <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Color="Color.Error" /></MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Total Debt:</MudText>
                            <MudText Typo="Typo.h6">@FormatCurrency(totalDebt)</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body1">Remaining Debt:</MudText>
                            <MudText Typo="Typo.h6">@FormatCurrency(remainingDebt)</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body1">Current Balance:</MudText>
                            <MudText Typo="Typo.h6" Color="@(balance >= 0 ? Color.Success : Color.Error)">
                                @FormatCurrency(balance)
                                <MudIcon Icon="@(balance >= 0 ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Color="@(balance >= 0 ? Color.Success : Color.Error)" />
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Credit vs Debit Donut Chart -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Credit vs Debit</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudPaper Class="pa-4">
                        <MudChart ChartType="ChartType.Donut" Width="100%" Height="300px" InputData="@donutChartData" InputLabels="@donutChartLabels" InputColors="@donutChartColors"></MudChart>
                    </MudPaper>
                    <MudText Typo="Typo.h6" Class="mt-2">Credit vs Debit</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Line Chart -->
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Transactions Over Time</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <div>
                        <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options" />
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body1" Class="py-3">Selected: @(Index < 0 ? "None" : Series[Index].Name)</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudSlider @bind-Value="Options.LineStrokeWidth" Min="1" Max="10" Color="Color.Info">Line Width: @Options.LineStrokeWidth.ToString()</MudSlider>
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Top 5 Highest Inflows -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Top 5 Highest Inflows</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="top5HighestInflows" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Amount">@FormatCurrency(context.Amount)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Top 5 Lowest Inflows -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Top 5 Lowest Inflows</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="top5LowestInflows" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Amount">@FormatCurrency(context.Amount)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Top 5 Highest Outflows -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Top 5 Highest Outflows</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="top5HighestOutflows" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Amount">@FormatCurrency(context.Amount)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Top 5 Lowest Outflows -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Top 5 Lowest Outflows</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="top5LowestOutflows" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Amount">@FormatCurrency(context.Amount)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Top 5 Highest Debts -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Top 5 Highest Debts</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="top5HighestDebts" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Creditor</MudTh>
                            <MudTh>Amount Owed</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Creditor">@context.Creditor</MudTd>
                            <MudTd DataLabel="Amount Owed">@FormatCurrency(context.AmountOwed)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Pending Debts -->
        <MudItem xs="12">
            <MudCard Class="mt-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Pending Debts</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (pendingDebts.Any())
                    {
                        <MudTable Items="pendingDebts" Hover="true" Bordered="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Creditor</MudTh>
                                <MudTh>Amount Owed</MudTh>
                                <MudTh>Due Date</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Creditor">@context.Creditor</MudTd>
                                <MudTd DataLabel="Amount Owed">@FormatCurrency(context.AmountOwed)</MudTd>
                                <MudTd DataLabel="Due Date">@context.DueDate.ToShortDateString()</MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">No pending debts.</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private decimal totalInflows;
    private decimal totalOutflows;
    private decimal totalDebt;
    private decimal remainingDebt;
    private decimal balance;

    private List<Debt> pendingDebts = new List<Debt>();
    private string userName;
    private string greeting;
    private DateTime currentDateTime;
    private string currency = "USD"; // Default currency

    // Donut Chart Data
    private double[] donutChartData;
    private string[] donutChartLabels = { "Credit", "Debit" };
    private string[] donutChartColors = { "#4CAF50", "#F44336" };

    // Top 5 Lists
    private List<Transaction> top5HighestInflows = new List<Transaction>();
    private List<Transaction> top5LowestInflows = new List<Transaction>();
    private List<Transaction> top5HighestOutflows = new List<Transaction>();
    private List<Transaction> top5LowestOutflows = new List<Transaction>();
    private List<Debt> top5HighestDebts = new List<Debt>();

    // Date Range Picker
    private DateRange _dateRange = new DateRange(DateTime.Now.AddMonths(-6), DateTime.Now);

    // Line Chart Data
    private int Index = -1;
    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // Get the username from local storage
        userName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser") ?? "Guest";

        // Get the user's preferred currency from local storage
        currency = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userCurrency") ?? "USD";

        await LoadDashboardData();
    }

    private string FormatCurrency(decimal amount)
    {
        if (currency == "NPR")
        {
            return $"Rs {amount:N2}"; // Use "Rs" as the symbol for NPR
        }
        else
        {
            var cultureInfo = new CultureInfo("en-US"); // Default to USD
            return amount.ToString("C", cultureInfo); // Use "$" for USD
        }
    }

    private async Task LoadDashboardData()
    {
        // Get current date and time
        currentDateTime = DateTime.Now;

        // Set greeting based on time of day
        greeting = currentDateTime.Hour < 12 ? "Morning" : currentDateTime.Hour < 18 ? "Afternoon" : "Evening";

        // Fetch transaction summary
        var transactionSummary = await DashboardService.GetTransactionSummaryAsync(userName, _dateRange.Start.Value, _dateRange.End.Value);
        totalInflows = transactionSummary.totalInflows;
        totalOutflows = transactionSummary.totalOutflows;
        totalDebt = transactionSummary.totalDebt;
        remainingDebt = transactionSummary.remainingDebt;

        // Calculate balance (inflows - outflows)
        balance = totalInflows - totalOutflows;

        // Get pending debts
        pendingDebts = await DashboardService.GetPendingDebtsAsync(userName, _dateRange.Start.Value, _dateRange.End.Value);

        // Prepare Donut Chart Data
        var categorySummary = await DashboardService.GetCategoryWiseTransactionSummaryAsync(userName, _dateRange.Start.Value, _dateRange.End.Value);
        donutChartData = new double[] { (double)categorySummary["Credit"], (double)categorySummary["Debit"] };

        // Fetch top 5 highest/lowest inflows, outflows, and debts
        var top5Data = await DashboardService.GetTop5TransactionsAndDebtsAsync(userName, _dateRange.Start.Value, _dateRange.End.Value);
        top5HighestInflows = top5Data.top5HighestInflows;
        top5LowestInflows = top5Data.top5LowestInflows;
        top5HighestOutflows = top5Data.top5HighestOutflows;
        top5LowestOutflows = top5Data.top5LowestOutflows;
        top5HighestDebts = top5Data.top5HighestDebts;

        // Initialize Line Chart
        await UpdateLineChart();
    }

    private async Task UpdateLineChart()
    {
        var (dates, amounts) = await DashboardService.GetTransactionsForLineChartAsync(userName, _dateRange.Start.Value, _dateRange.End.Value);

        // Update X-axis labels (dates)
        XAxisLabels = dates.Select(d => d.ToShortDateString()).ToArray();

        // Update Series (amounts)
        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Transactions",
                Data = amounts.Select(a => (double)a).ToArray()
            }
        };

        // Notify the component to re-render
        StateHasChanged();
    }

    private async Task UpdateDashboardData()
    {
        await LoadDashboardData();
    }
}