@page "/login"
@using MudBlazor
@using MauiApp2.Data.Service
@using MauiApp2.Data.Models
@using Microsoft.AspNetCore.Components.Forms
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<MudPaper Class="d-flex justify-center align-center" Style="min-height: 100vh; background-color: #f4f6f8;">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="split-layout">
        <!-- Left Side: Image and Welcome Text -->
        <div class="welcome-section">
            <!-- Image -->
            <img src="https://i.ibb.co/gJp5kVg/piggypangimage.png" alt="Expense Tracker" class="welcome-image" />

            <!-- Welcome Text -->
            <div class="welcome-text">
                <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-4 animate-fade-in">
                    Welcome to Expense Tracker App
                </MudText>
                <MudText Typo="Typo.body1" GutterBottom="true" Class="mb-4 animate-fade-in">
                    Track your expenses effortlessly! You can add transactions, manage debit/credit, track debts, and view detailed analytics.
                </MudText>
            </div>
        </div>

        <!-- Right Side: Login Form -->
        <div class="login-form">
            <MudCard Class="no-border">
                <MudCardContent>
                    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true" Class="mb-4">
                        Login to Your Account
                    </MudText>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Username -->
                        <MudTextField @bind-Value="loginModel.Username"
                                      Label="Username"
                                      Required="true"
                                      Variant="Variant.Filled"
                                      FullWidth="true"
                                      Class="mb-4" />

                        <!-- Password -->
                        <MudTextField @bind-Value="loginModel.Password"
                                      Label="Password"
                                      InputType="InputType.Password"
                                      Required="true"
                                      Variant="Variant.Filled"
                                      FullWidth="true"
                                      Class="mb-4" />

                        <!-- Login Button -->
                        <MudButton FullWidth="true"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   ButtonType="ButtonType.Submit"
                                   Class="mt-4">
                            Login
                        </MudButton>

                        <!-- Success or Error Message -->
                        @if (!string.IsNullOrEmpty(alertMessage))
                        {
                                <MudAlert Severity="@alertSeverity" Variant="Variant.Filled" Class="mt-3">
                                @alertMessage
                                </MudAlert>
                        }
                    </EditForm>
                </MudCardContent>
            </MudCard>

            <!-- Create Account Link -->
            <MudText Align="Align.Center" Class="mt-3">
                Don't have an account? <MudLink Href="/signup" Color="Color.Primary">Sign up here</MudLink>
            </MudText>
        </div>
    </MudContainer>
</MudPaper>

<style>
    /* Layout for left and right sections */
    .split-layout {
        display: flex;
        gap: 4rem;
        align-items: center;
        justify-content: space-between;
        padding: 2rem;
    }

    /* Left Side: Welcome Section */
    .welcome-section {
        flex: 1;
        max-width: 50%;
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .welcome-image {
        width: 100%;
        max-height: 400px;
        object-fit: cover; /* Ensures the image covers the container */
        border-radius: 12px;
    }

    .welcome-text {
        text-align: left;
    }

    /* Right Side: Login Form */
    .login-form {
        flex: 1;
        max-width: 500px;
        background: white;
        padding: 2.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Remove border from MudCard */
    .no-border {
        border: none !important;
        box-shadow: none !important;
    }

    /* Animation for the welcome message and description */
    .animate-fade-in {
        animation: fadeIn 1.5s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Spacing for form elements */
    .mb-4 {
        margin-bottom: 1.5rem !important;
    }

    .mt-4 {
        margin-top: 1.5rem !important;
    }
</style>

@code {
    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private LoginModel loginModel = new LoginModel();
    private string alertMessage = string.Empty;
    private Severity alertSeverity = Severity.Error; // Default to error severity

    private async Task HandleValidSubmit()
    {
        try
        {
            // Clear any previous alert messages
            alertMessage = string.Empty;

            // Get user from database
            var user = await UserService.GetUserAsync(loginModel.Username);

            if (user == null)
            {
                alertMessage = "Invalid username or password";
                alertSeverity = Severity.Error;
                return;
            }

            // Validate password
            if (!UserService.ValidateUser(user, loginModel.Password))
            {
                alertMessage = "Invalid username or password";
                alertSeverity = Severity.Error;
                return;
            }

            // Store user information in local storage or session
            await JS.InvokeVoidAsync("localStorage.setItem", "currentUser", user.Username);
            await JS.InvokeVoidAsync("localStorage.setItem", "userCurrency", user.Currency);

            // Show success message
            alertMessage = "Login successful! Redirecting...";
            alertSeverity = Severity.Success;

            // Redirect to main page or dashboard after a short delay
            await Task.Delay(2000); // 2 seconds delay
            Navigation.NavigateTo("/", forceLoad: true);

        }
        catch (Exception ex)
        {
            alertMessage = $"Login error: {ex.Message}";
            alertSeverity = Severity.Error;
        }
    }
}