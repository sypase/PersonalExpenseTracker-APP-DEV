@page "/import"

@using MauiApp2.Data.Service
@inject FileUploadService FileUploadService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using MauiApp2.Data.Models
@using MudBlazor

<PageTitle>Import/Export</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mb-6">Import Transactions from CSV</MudText>

    <MudPaper Class="pa-6" Elevation="5" Style="max-width: 600px; margin: 0 auto;">
        <MudText Typo="Typo.subtitle1" GutterBottom="true">Upload your CSV file to import transactions.</MudText>

        <!-- File Upload Section -->
        <MudGrid Class="mb-4">
            <MudItem xs="12">
                <InputFile OnChange="OnFileChange" Accept=".csv" class="mb-3" />
            </MudItem>
        </MudGrid>

        <!-- Processing Indicator -->
        @if (isProcessing)
        {
            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudLinearProgress Indeterminate="true" Color="Color.Primary" Class="mb-2" />
                    <MudText Typo="Typo.body2" Align="Align.Center">Processing the file...</MudText>
                </MudItem>
            </MudGrid>
        }

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-3">@errorMessage</MudAlert>
                </MudItem>
            </MudGrid>
        }

        <!-- Submit Button -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" Class="text-center">
                <MudButton OnClick="SubmitFile" Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Upload" Disabled="@(selectedFile == null || isProcessing)">
                    Submit
                </MudButton>
            </MudItem>
        </MudGrid>

        <!-- Imported Transactions Table -->
        @if (importedTransactions.Any())
        {
            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-6">Imported Transactions</MudText>
            <MudPaper Elevation="3" Class="pa-4">
                <MudTable Items="importedTransactions" Bordered="true" Hover="true" Dense="true" Striped="true" Elevation="0">
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Tags</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Title</MudTd>
                        <MudTd>@context.Amount</MudTd>
                        <MudTd>@(context.Date.HasValue ? context.Date.Value.ToString("MM/dd/yyyy") : "N/A")</MudTd>
                        <MudTd>@context.Type</MudTd>
                        <MudTd>@string.Join(", ", context.Tags)</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<Transaction> importedTransactions = new List<Transaction>();
    private bool isProcessing = false;
    private string errorMessage;
    private string currentUsername;
    private IBrowserFile selectedFile;

    // Fetch current username from localStorage when the page initializes
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUsername = await JS.InvokeAsync<string>("localStorage.getItem", "currentUser");
            if (string.IsNullOrEmpty(currentUsername))
            {
                errorMessage = "User is not logged in.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error retrieving username: {ex.Message}";
        }
    }

    // Triggered when a file is selected
    private void OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile == null)
        {
            errorMessage = "No file selected!";
        }
    }

    // Method to handle file submission
    private async Task SubmitFile()
    {
        if (selectedFile == null)
        {
            errorMessage = "Please select a file first!";
            return;
        }

        try
        {
            isProcessing = true;
            errorMessage = null;

            if (string.IsNullOrEmpty(currentUsername))
            {
                errorMessage = "Username not found!";
                return;
            }

            // Call the FileUploadService to process the CSV file with the current username
            importedTransactions = await FileUploadService.ProcessCsvFileAsync(selectedFile, currentUsername);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading file: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}