@page "/export"

@using MauiApp2.Data.Models
@using MauiApp2.Data.Service
@using Microsoft.Extensions.Logging
@inject FileExportService FileExportService
@inject NavigationManager Navigation
@inject ILogger<Export> Logger
@inject IJSRuntime JS
@using MudBlazor

<PageTitle>Export Data</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mb-6">Export Data</MudText>

    <MudPaper Elevation="5" Class="pa-6" Style="max-width: 600px; margin: 0 auto;">
        <!-- Username Input -->
        <MudGrid Class="mb-4">
            <MudItem xs="12">
                <MudTextField Label="Enter Username to Export Data"
                              @bind-Value="RefUsername"
                              Disabled="@IsUsernameDisabled"
                              Variant="Variant.Outlined"
                              FullWidth="true" />
            </MudItem>
        </MudGrid>

        <!-- Export Buttons -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" Class="text-center">
                <MudButton OnClick="ExportTransactions"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           EndIcon="@Icons.Material.Filled.FileDownload"
                           Disabled="@IsExportButtonDisabled"
                           Class="mr-3">
                    Export Transactions
                </MudButton>
                <MudButton OnClick="ExportDebts"
                           Color="Color.Secondary"
                           Variant="Variant.Filled"
                           EndIcon="@Icons.Material.Filled.FileDownload"
                           Disabled="@IsExportButtonDisabled">
                    Export Debts
                </MudButton>
            </MudItem>
        </MudGrid>

        <!-- Exported CSV Content -->
        @if (!string.IsNullOrEmpty(ExportContent))
        {
            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" GutterBottom="true">Exported CSV Content:</MudText>
                    <MudPaper Elevation="3" Class="pa-4">
                        <pre style="white-space: pre-wrap; word-wrap: break-word;">@ExportContent</pre>
                    </MudPaper>
                    <MudButton OnClick="DownloadCsv"
                               Color="Color.Success"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.Download"
                               Class="mt-3">
                        Download CSV
                    </MudButton>
                </MudItem>
            </MudGrid>
        }

        <!-- Error Messages -->
        @if (!string.IsNullOrEmpty(ExportError))
        {
            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-3">@ExportError</MudAlert>
                </MudItem>
            </MudGrid>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="mb-3">@errorMessage</MudAlert>
                </MudItem>
            </MudGrid>
        }
    </MudPaper>
</MudContainer>

@code {
    private string RefUsername { get; set; }
    private string ExportContent { get; set; }
    private string ExportError { get; set; }
    private string errorMessage { get; set; }
    private bool IsExportButtonDisabled { get; set; } = true;
    private bool IsUsernameDisabled { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUsernameAsync();
    }

    private async Task GetCurrentUsernameAsync()
    {
        try
        {
            // Get current username from localStorage using JavaScript interop
            var currentUsername = await JS.InvokeAsync<string>("localStorage.getItem", "currentUser");

            if (string.IsNullOrEmpty(currentUsername))
            {
                errorMessage = "User is not logged in.";
                IsExportButtonDisabled = true;
            }
            else
            {
                RefUsername = currentUsername;
                IsUsernameDisabled = true;  // Disable the input as it's populated with the current username
                IsExportButtonDisabled = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error retrieving the current user from localStorage.");
            errorMessage = "An error occurred while retrieving the user information.";
            IsExportButtonDisabled = true;
        }
    }

    private async Task ExportTransactions()
    {
        try
        {
            // Clear previous error or content
            ExportError = null;
            ExportContent = await FileExportService.ExportTransactionsToCsvAsync(RefUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting transactions.");
            ExportError = $"Error exporting transactions: {ex.Message}";
        }
    }

    private async Task ExportDebts()
    {
        try
        {
            // Clear previous error or content
            ExportError = null;
            ExportContent = await FileExportService.ExportDebtsToCsvAsync(RefUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting debts.");
            ExportError = $"Error exporting debts: {ex.Message}";
        }
    }

    private async Task DownloadCsv()
    {
        try
        {
            // Generate a filename
            var filename = $"export_{RefUsername}_{DateTime.Now:yyyyMMddHHmmss}.csv";

            // Call JavaScript to trigger the download
            await JS.InvokeVoidAsync("downloadCsv", filename, ExportContent);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading CSV.");
            ExportError = $"Error downloading CSV: {ex.Message}";
        }
    }
}