@page "/export"
@using MauiApp2.Data.Models
@using MauiApp2.Data.Service
@using Microsoft.Extensions.Logging
@inject FileExportService FileExportService
@inject NavigationManager Navigation
@inject ILogger<Export> Logger
@inject IJSRuntime JS

<h3>Export Data</h3>

<div>
    <label for="refUsername">Enter Username to Export Data:</label>
    <input type="text" id="refUsername" @bind="RefUsername" disabled="@IsUsernameDisabled" />
</div>

<div class="mt-3">
    <button class="btn btn-primary" @onclick="ExportTransactions" disabled="@IsExportButtonDisabled">Export Transactions</button>
    <button class="btn btn-secondary" @onclick="ExportDebts" disabled="@IsExportButtonDisabled">Export Debts</button>
</div>

@if (!string.IsNullOrEmpty(ExportContent))
{
    <div class="mt-3">
        <h5>Exported CSV Content:</h5>
        <pre>@ExportContent</pre>
        <button class="btn btn-success" @onclick="DownloadCsv">Download CSV</button>
    </div>
}

@if (!string.IsNullOrEmpty(ExportError))
{
    <div class="mt-3 alert alert-danger">
        <strong>Error:</strong> @ExportError
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="mt-3 alert alert-warning">
        <strong>Warning:</strong> @errorMessage
    </div>
}

@code {
    private string RefUsername { get; set; }
    private string ExportContent { get; set; }
    private string ExportError { get; set; }
    private string errorMessage { get; set; }
    private bool IsExportButtonDisabled { get; set; } = true;
    private bool IsUsernameDisabled { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUsernameAsync();
    }

    private async Task GetCurrentUsernameAsync()
    {
        try
        {
            // Get current username from localStorage using JavaScript interop
            var currentUsername = await JS.InvokeAsync<string>("localStorage.getItem", "currentUser");

            if (string.IsNullOrEmpty(currentUsername))
            {
                errorMessage = "User is not logged in.";
                IsExportButtonDisabled = true;
            }
            else
            {
                RefUsername = currentUsername;
                IsUsernameDisabled = true;  // Disable the input as it's populated with the current username
                IsExportButtonDisabled = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error retrieving the current user from localStorage.");
            errorMessage = "An error occurred while retrieving the user information.";
            IsExportButtonDisabled = true;
        }
    }

    private async Task ExportTransactions()
    {
        try
        {
            // Clear previous error or content
            ExportError = null;
            ExportContent = await FileExportService.ExportTransactionsToCsvAsync(RefUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting transactions.");
            ExportError = $"Error exporting transactions: {ex.Message}";
        }
    }

    private async Task ExportDebts()
    {
        try
        {
            // Clear previous error or content
            ExportError = null;
            ExportContent = await FileExportService.ExportDebtsToCsvAsync(RefUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting debts.");
            ExportError = $"Error exporting debts: {ex.Message}";
        }
    }

    private async Task DownloadCsv()
    {
        try
        {
            // Generate a filename
            var filename = $"export_{RefUsername}_{DateTime.Now:yyyyMMddHHmmss}.csv";

            // Call JavaScript to trigger the download
            await JS.InvokeVoidAsync("downloadCsv", filename, ExportContent);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading CSV.");
            ExportError = $"Error downloading CSV: {ex.Message}";
        }
    }
}